library(tidyverse)
scoreData <- read_csv(file = "concentration.csv")
concData <- read_csv(file = "concentration.csv")
View(concData)
concData
sample(concData, rep=TRUE)
sample
n <- 400
sample(concData, n, rep=TRUE)
sample(concData, rep=TRUE)
sample(concData, rep=TRUE)
sample(concData, rep=TRUE)
set.seed(123)
concData <- read_csv(file = "concentration.csv")
concData
quad <- lm(Total_lignin ~ concentration + I(concentration^2), data= concData)
summary(quad)
beta1 <- quad$coefficients[2]
quad$coefficients
beta1
quad$coefficients
beta1 <- quad$coefficients[2,2]
quad$coefficients
quad$fitted.values
quad$coefficients
quadsum <- summary(quad)
coef(quadsum)
coef(quad)
coef(quad)[2,2]
coef(quad)[2]
coef(quad)
coef(quad)[1] - coef(quad)[2]
quadsum
quadsum$coefficients
beta1 <- quadsum$coefficients[3,2]
beta1
beta1 <- quadsum$coefficients[2,1]
beta1
beta1 <- quadsum$coefficients[2,1]
beta2 <- quadsum$coefficients[3,1]
beta2
max <- -(beta1) / (2*beta2)
max
library(tidyverse)
concData <- read_csv(file = "concentration.csv")
concData
set.seed(123)
sample(concData, rep=TRUE)
concData
newconcData <- cbind(concData$concentration, concData$Total_lignin)
newconcData
set.seed(123)
sample(newconcData, rep=TRUE)
sample(1:nrow(newconcData), rep=TRUE)
sample(1:nrow(concData), rep=TRUE)
sample(1:nrow(concData), 400, rep=TRUE)
index <- sample(1:nrow(concData), 400, rep=TRUE)
concData[index,]
index
set.seed(123)
index <- sample(1:nrow(concData), 400, rep=TRUE)
newData <- concData[index,]
quad <- lm(Total_lignin ~ concentration + I(concentration^2), data= newData)
quadsum <- summary(quad)
beta1 <- quadsum$coefficients[2,1]
beta2 <- quadsum$coefficients[3,1]
max <- -(beta1) / (2*beta2)
set.seed(123)
B <- 5000
boot_est <- rep(NA, B) #to store estimates of max
for(i in 1:B){
index <- sample(1:nrow(concData), 400, rep=TRUE)
newData <- concData[index,]
quad <- lm(Total_lignin ~ concentration + I(concentration^2),        data=newData)
quadsum <- summary(quad)
beta1 <- quadsum$coefficients[2,1]
beta2 <- quadsum$coefficients[3,1]
boot_est[i] <- -(beta1) / (2*beta2)
}
boot_est
set.seed(123)
B <- 5000
bootEst <- rep(NA, B) #to store estimates of max
for(i in 1:B){
index <- sample(1:nrow(concData), 400, rep=TRUE)
newData <- concData[index,]
quad <- lm(Total_lignin ~ concentration + I(concentration^2),        data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
bootEst[i] <- -(beta1) / (2*beta2)
}
bootEst
bootEstSd <- sd(bootEst)
bootEstSE <- sd(bootEst)
bootFun <- function(dataset, predictor, response){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(response ~ predictor + I(predictor^2),                   data=dataset)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
replicate(5000, bootFun(concData, concentration, Total_lignin))
replicate(5000, bootFun(concData, concData$concentration, concData$Total_lignin))
bootFun <- function(dataset, predictor, response){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(response ~ predictor + I(predictor^2),                   data=NewData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
replicate(n = 5000, bootFun(concData, concData$concentration, concData$Total_lignin))
bootFun <- function(dataset, predictor, response){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(response ~ predictor + I(predictor^2),                   data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
replicate(n = 5000, bootFun(concData, concData$concentration, concData$Total_lignin))
bootFun <- function(dataset, predictor, response){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(newData$Total_lignin ~ newData$concentration +           I(newData$concentration^2), data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
replicate(n = 5000, bootFun(concData, concData$concentration, concData$Total_lignin))
bootFun <- function(dataset, predictor, response){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(Total_lignin ~ concentration +           I(concentration^2), data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
replicate(n = 5000, bootFun(concData, concData$concentration, concData$Total_lignin))
bootFun <- function(dataset){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(Total_lignin ~ concentration +                           I(concentration^2), data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
replicate(n = 5000, bootFun(concData))
average(bootEst)
mean(bootEst)
sd(bootEst)
mean(repEst)
repEst <- replicate(n = 5000, bootFun(concData))
mean(repEst)
sd(repEst)
repEst <- replicate(n = 5000, bootFun(concData, concData$Total_lignin, concData$concentration))
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(resp ~ pred + I(pred^2), data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData, concData$Total_lignin, concData$concentration))
repEst
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm("resp" ~ "pred" + I("pred"^2), data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData, "Total_lignin", "concentration"))
repEst <- replicate(n = 5000, bootFun(concData, Total_lignin, concentration))
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(resp ~ pred + I(pred^2), data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData, Total_lignin, concentration))
repEst <- replicate(n = 5000, bootFun(concData, concentration, Total_lignin))
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(resp ~ pred + I(pred^2), data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData, "concentration", "Total_lignin"))
repEst <- replicate(n = 5000, bootFun(concData, pred = "concentration", resp ="Total_lignin"))
repEst <- replicate(n = 5000, bootFun(concData, pred = `concentration`, resp =`Total_lignin`))
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(newData$resp ~ newData$pred + I(newData$pred^2), data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData, pred = concentration, resp =Total_lignin))
?lapply()
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(  as.formula(  paste(resp, "~ pred + I(pred)^2")), data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData, pred = "concentration", resp = "Total_lignin"))
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(  as.formula(  paste(resp, "~ pred + I(pred^2)")), data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData, pred = "concentration", resp = "Total_lignin"))
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
Data <- dataset[index,]
#newData <- cbind(Data$pred, Data$resp)
quad <- lm(newData[["resp"]] ~ newData[["pred"]] + I(newData[["pred"]]^2), data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData, pred = "concentration", resp = "Total_lignin"))
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
Data <- dataset[index,]
#newData <- cbind(Data$pred, Data$resp)
quad <- lm(newData[["Total_lignin"]] ~ newData[["concentration"]] + I(newData[["concentration"]]^2), data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData, pred = "concentration", resp = "Total_lignin"))
concData$
repEst
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(paste(resp, "~", pred, "+", I(pred^2), data=newData))
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData,"concentration","Total_lignin"))
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(paste(resp, "~", pred, "+", I(pred), data=newData))
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData,"concentration","Total_lignin"))
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(paste(resp, "~", pred, "+", pred, data=newData))
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData,"concentration","Total_lignin"))
concData[["concentration"]]
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(newData[["resp"]] ~ newData[["pred"]], data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData,"concentration","Total_lignin"))
repEst <- replicate(n = 5000, bootFun(concData,concentration,Total_lignin))
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(newData[[resp]] ~ newData[[pred]], data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
repEst <- replicate(n = 5000, bootFun(concData,"concentration","Total_lignin"))
quadSum
#redo for Total_lignin and use the replicate function
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(newData[[resp]] ~ newData[[pred]], data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
quadSum
repEst <- replicate(n = 5000, bootFun(concData,"concentration","Total_lignin"))
quadSum$coefficients
bootFun <- function(dataset, pred, resp){
index <- sample(1:nrow(dataset), 400, rep=TRUE)
newData <- dataset[index,]
quad <- lm(newData[[resp]] ~ newData[[pred]] + I(newData[[pred]]^2), data=newData)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
result <- -(beta1) / (2*beta2)
return(result)
}
quadSum$coefficients
repEst <- replicate(n = 5000, bootFun(concData,"concentration","Total_lignin"))
repEst
seBootFun <- function(dataset, pred, resp) {
return(sd(bootFun(dataset, pred, resp)))
}
repSd <- replicate(n = 1, seBootFun(concData,"concentration","Total_lignin"))
repSd
?rep()
seBootFun <- function(dataset, pred, resp, B) {
return(sd(rep(bootFun(dataset, pred, resp), B)))
}
repSd <- replicate(n = 1, seBootFun(concData,"concentration","Total_lignin", 5000))
repSd
seBootFun <- function(dataset, pred, resp, B) {
return(sd(replicate(B,bootFun(dataset, pred, resp))))
}
seBootFun(concData,"concentration","Total_lignin", 5000)
sd(repEst)
seBootFun(concData,"concentration","Glucose", 5000)
response <- c("Lignin", "Glucose", "Xylose", "Arabinose")
lapply(response, seBootFun)
?lapply
lapply(response, seBootFun(concData, "concentration", 5000))
lapply(response, seBootFun(concData, "concentration", response 5000))
concData
response <- c("Total_Lignin", "Glucose", "Xylose", "Arabinose")
lapply(response, seBootFun(concData, "concentration", response, 5000))
lapply(response, seBootFun(concData, "concentration", 5000))
lapply(response, seBootFun(concData, "concentration", response, 5000))
lapply(response, seBootFun)
lapply(response, seBootFun, dataset = concData, pred = "concentration", B = 5000)
str(response)
lapply(response, seBootFun, dataset = concData, pred = "concentration", resp = response, B = 5000)
lapply(response, seBootFun, dataset = concData, pred = "concentration", resp = response[1:4], B = 5000)
response <- c("Total_lignin", "Glucose", "Xylose", "Arabinose")
lapply(response, seBootFun, dataset = concData, pred = "concentration", resp = response[1:4], B = 5000)
library(parallel)
cores <- detectCores()
cluster <- makeCluster(cores - 1)
lignin <- seBootFun(concData,"concentration","Total_lignin", 5000)
glucose <- seBootFun(concData,"concentration","Glucose", 5000)
xylose <- seBootFun(concData,"concentration","Xylose", 5000)
arabinose <- seBootFun(concData,"concentration","Arabinose", 5000)
lapply(1:400, seBootFun, dataset = concData, pred = "concentration", response, B = 5000)
response <- c("Total_lignin", "Glucose", "Xylose", "Arabinose")
lapply(1:400, seBootFun, dataset = concData, pred = "concentration", response, B = 5000)
lapply(1:400, seBootFun, dataset = concData, pred = "concentration", resp = response, B = 5000)
lapply(1:4, seBootFun, dataset = concData, pred = "concentration", resp = response, B = 5000)
lapply(response, FUN = seBootFun, dataset = concData, pred = "concentration", B = 5000)
clusterExport(cluster, list("lignin", "glucose", "xylose", "arabinose"))
clusterEvalQ(cluster, library(tidyverse))
resultsPar <- parLapply(response, FUN = seBootFun, dataset = concData, pred = "concentration", B = 5000)
resultsPar <- parLapply(cluster, response, FUN = seBootFun, dataset = concData, pred = "concentration", B = 5000)
clusterExport(cluster, list("lignin", "glucose", "xylose", "arabinose"))
resultsPar <- parLapply(cluster, response, fun = seBootFun, dataset = concData, pred = "concentration", B = 5000)
clusterExport(cluster, list("seBootFun"))
resultsPar <- parLapply(cluster, response, fun = seBootFun, dataset = concData, pred = "concentration", B = 5000)
clusterExport(cluster, list("seBootFun"))
clusterExport(cluster, list("seBootFun"))
resultsPar <- parLapply(cluster, response, fun = seBootFun, dataset = concData, pred = "concentration", B = 5000)
clusterExport(cluster, list("seBootFun", "bootFun"))
resultsPar <- parLapply(cluster, response, fun = seBootFun, dataset = concData, pred = "concentration", B = 5000)
View(resultsPar)
lmod1 <- lm(Total_lignin ~ concentration, data = concData)
lmod1 <- lm(Total_lignin ~ concentration, data = concData)
lmod1Sum <- summary(lmod1)
beta1 <- lmod1Sum$coefficients[2,1]
beta2 <- lmod1Sum$coefficients[3,1]
lmod1 <- lm(Total_lignin ~ concentration + I(concentration^2), data = concData)
lmod1Sum <- summary(lmod1)
beta1 <- lmod1Sum$coefficients[2,1]
beta2 <- lmod1Sum$coefficients[3,1]
max <- -(beta1) / (2*beta2)
se <- sd(max)
lmod1Sum
maxFun <- function(dataset, resp) {
quad <- lm(dataset[[resp]] ~ concentration + I(concentration^2), data =         dataset)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
max <- -(beta1) / (2*beta2)
return(max)
}
maxFun(concData, "Total_lignin")
ligMax <- maxFun(concData, "Total_lignin")
glucoseMax <- maxFun(concData, "Glucose")
xyloseMax <- maxFun(concData, "Xylose")
arabinoseMax <- maxFun(concData, "Arabinose")
maxAll <- c(ligMax,glucoseMax,xyloseMax,arabinoseMax)
se <- lapply(response, FUN = seBootFun, dataset = concData, pred = "concentration", B = 5000)
resultsPar
table <- cbind(response, maxAll, resultsPar)
table
?kable
kable(table, row.names = c("Lignin", "Glucose", "Xylose", "Arabinose"), col.names= c("Compound", "Max", "SE"))
library(tidyverse)
kable(table, row.names = c("Lignin", "Glucose", "Xylose", "Arabinose"), col.names= c("Compound", "Max", "SE"))
library(kable)
library(kableExtra)
library(knitr)
kable(table, row.names = c("Lignin", "Glucose", "Xylose", "Arabinose"), col.names= c("Compound", "Max", "SE"))
kable(table)
SE <- parLapply(cluster, response, fun = seBootFun, dataset = concData, pred = "concentration", B = 5000)
Max <- c(ligMax, glucoseMax, xyloseMax, arabinoseMax)
table <- cbind(response, Max, SE)
table
kable(table)
kable(table, digits = 2)
table <- cbind(Max, SE)
kable(table)
kable(table, row.names = TRUE)
table <- cbind(Max, SE)
table
table <- cbind(response, Max, SE)
table
dim(concData)
library(parallel)
cores <- detectCores()
cluster <- makeCluster(cores - 1)
clusterExport(cluster, list("seBootFun", "bootFun"))
SE <- parLapply(cluster, response,
fun = seBootFun,
dataset = concData,
pred = "concentration", B = 5000)
SE
response <- c("Total_lignin", "Glucose", "Xylose", "Arabinose")
se <- lapply(response, FUN = seBootFun,
dataset = concData,
pred = "concentration", B = 5000)
se
#estimated maximum from full dataset
maxFun <- function(dataset, resp) {
quad <- lm(dataset[[resp]] ~ concentration +
I(concentration^2), data = dataset)
quadSum <- summary(quad)
beta1 <- quadSum$coefficients[2,1]
beta2 <- quadSum$coefficients[3,1]
max <- -(beta1) / (2*beta2)
return(max)
}
ligMax <- maxFun(concData, "Total_lignin")
glucoseMax <- maxFun(concData, "Glucose")
xyloseMax <- maxFun(concData, "Xylose")
arabinoseMax <- maxFun(concData, "Arabinose")
Max <- c(ligMax, glucoseMax, xyloseMax, arabinoseMax)
table <- cbind(response, Max, SE)
table
res <- c(rep(1, times=3), TRUE, "hey")
res[4]
?exp()
